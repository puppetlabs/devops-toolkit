version: "1.0"
kind: pipeline
metadata:
  name: devops-toolkit-pr-open
  description: Triggered when a PR is opened or synced
spec:
  triggers:
  - type: git
    provider: github
    context: github
    name: pr-open
    repo: puppetlabs/devops-toolkit
    events:
    - pullrequest.opened
    - pullrequest.reopened
    - pullrequest.synchronize
    pullRequestAllowForkEvents: true
    pullRequestTargetBranchRegex: /master/gi
    verified: true
  contexts: []
  stages:
    - release
    - deploy
  steps:
    main_clone:
      title: Cloning repository
      type: git-clone
      arguments:
        repo: "${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
        git: github
        revision: "${{CF_BRANCH}}"
      stage: release
    build_app:
      title: Building Hugo
      image: klakegg/hugo:0.75.1-ext-alpine
      commands:
      - ./build.sh
      - cf_export REPO_PATH=$PWD
      - cf_export BRANCH_NAME=$CF_BRANCH
      - cf_export APP_ID=pr-$CF_REPO_NAME-$CF_PULL_REQUEST_NUMBER
      stage: release
    build_image:
      title: Building container image
      type: build
      arguments:
        image_name: ci/dio/devops-toolkit
        tags:
        - ${{CF_SHORT_REVISION}}
        registry: gcr-gene-for-testing
      stage: release
    enrich_image:
      title: Adding PR info
      type: image-enricher
      arguments:
        IMAGE: gcr.io/gene-for-testing/ci/dio/devops-toolkit:${{CF_SHORT_REVISION}}
        BRANCH: '${{CF_BRANCH}}'
        REPO: "${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
        GIT_PROVIDER_NAME: github
      stage: release
    clone_env_repo:
      title: Cloning preview env. repo
      type: git-clone
      arguments:
        repo: puppetlabs/argocd-previews
        git: github
      stage: deploy
    define_preview:
      image: vfarcic/argocd-pipeline:1.0.ee76b7a
      title: Defining preview environment app
      working_directory: "${{clone_env_repo}}"
      commands:
      - set -e
      - export IMAGE_TAG='${{CF_SHORT_REVISION}}'
      - export HELM_REPO_BASE='gcr.io/gene-for-testing'
      - export HELM_REPO_IMAGE_PATH='ci/dio/devops-toolkit'
      - export INGRESS_DOMAIN='34.127.3.4.sslip.io'
      - git checkout ${{APP_ID}} || git checkout -b ${{APP_ID}}
      - cat $REPO_PATH/preview.yaml | kyml tmpl -e APP_ID -e BRANCH_NAME -e IMAGE_TAG -e HELM_REPO_BASE -e HELM_REPO_IMAGE_PATH -e INGRESS_DOMAIN | tee helm/templates/$APP_ID.yaml
      - git add .
      - git status
      stage: deploy
    push_env_repo:
      title: Pushing preview env. changes to the repo
      type: git-commit
      arguments:
        repo: puppetlabs/argocd-previews
        git: github
        commit_message: "Adding PR ${{CF_PULL_REQUEST_NUMBER}} from ${{CF_REPO_NAME}}"
        git_user_name: "${{CF_COMMIT_AUTHOR}}"
        working_directory: "/codefresh/volume/argocd-previews"
      stage: deploy
    get_git_token:
      title: Reading GitHub token
      image: codefresh/cli
      commands:
        - cf_export GITHUB_TOKEN=$(codefresh get context github --decrypt -o yaml | yq -y .spec.data.auth.password)
      stage: deploy
    create_github_pr:
      type: github-pr
      arguments:
        GITHUB_TOKEN: '${{GITHUB_TOKEN}}'
        GITHUB_REPO_OWNER: puppetlabs
        GITHUB_REPO_NAME: argocd-previews
        HEAD: '${{APP_ID}}'
        TITLE: 'Codefresh PR for ${{APP_ID}}'
        BASE: master
      stage: deploy
    wait_for_pr_ci:
      title: Wait for CI on pr to puppetlabs/argocd-previews
      type: freestyle
      working_directory: "${{clone_env_repo}}"
      arguments:
        image: 'debian:buster-slim'
        commands:
          - apt-get update -qq && apt-get install -y hub
          - export CURRENT_SHA=$(git rev-parse HEAD)
          - hub --version
          - cf_export GH_PREVEIW_PR=$(hub pr list |grep ${{APP_ID}} |tr -s ' ' |cut -d ' ' -f2 |cut -d '#' -f2)
          - echo
          - echo "The PR opened in the last step is number $GH_PREVEIW_PR"
          - echo
          - sleep 15 # give CI a chance to kick off before checking its status
          - export s=0
          - |
            while [ $s -lt 600 ]
            do
              ((s=s+10))
              gh_ci_status=$(hub ci-status $CURRENT_SHA || echo -n)
              if [ "$gh_ci_status" = 'success' ]; then
                echo "CI reports success"
                break
              elif [ "$gh_ci_status" = 'no status' ]; then
                echo "It seems no CI jobs are configured, moving on."
                break
              elif [ "$gh_ci_status" = 'failure' ]; then
                echo "CI failed, exiting"
                exit 1
              else
                sleep 10
              fi
            done
      stage: deploy
    merge_github_pr:
      type: github-pr
      arguments:
        GITHUB_TOKEN: '${{GITHUB_TOKEN}}'
        GITHUB_REPO_OWNER: puppetlabs
        GITHUB_REPO_NAME: argocd-previews
        GITHUB_PR_NUMBER: '${{GH_PREVEIW_PR}}'
        GITHUB_PR_OPERATION: merge
      stage: deploy
    argocd_sync_and_wait_previews:
      title: Sync ArgoCD previews app-of-apps and wait
      type: argocd-sync
      arguments:
        context: argocd-gene-test-1
        app_name: previews
        wait_healthy: true
      stage: deploy
    argocd_sync_and_wait_preview_env:
      title: Sync ArgoCD app for this preview and wait
      type: argocd-sync
      arguments:
        context: argocd-gene-test-1
        app_name: '${{APP_ID}}'
        wait_healthy: true
      stage: deploy
